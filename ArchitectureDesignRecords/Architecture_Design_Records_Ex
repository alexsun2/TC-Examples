# TC_TYPE: architecture_design_record

# Basic in-code ADR registry
class ADR:
    def __init__(self, id, title, status, context, decision, consequences):
        self.id = id
        self.title = title
        self.status = status
        self.context = context
        self.decision = decision
        self.consequences = consequences

    def display(self):
        return f"""ADR {self.id}: {self.title}
Status: {self.status}

Context:
{self.context}

Decision:
{self.decision}

Consequences:
{self.consequences}
"""

# Store ADRs in code â€” allows inspection, tooling, or version control hooks
adr_001 = ADR(
    id="001",
    title="Use PostgreSQL as the Primary Database",
    status="Accepted",
    context="Need a relational DB with strong query capabilities and ORM integration.",
    decision="We will use PostgreSQL.",
    consequences="Tight coupling to Postgres features; setup scripts must include Postgres."
)

# Example usage: logging ADRs in CI/CD, devtools, or documentation pipeline
if __name__ == "__main__":
    print(adr_001.display())
