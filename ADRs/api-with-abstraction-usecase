----- FILE: Architecture Decision Record (ADR) -----

# TC_TYPE: architecture_decision_record
# ADR 0003: Use REST API Instead of GraphQL

## Status
Accepted

## Context
We need an API protocol to expose data from our backend to clients.

## Decision
We will use REST instead of GraphQL because:
- REST is more widely supported in our current infrastructure.
- It simplifies onboarding for new developers.
- Existing tooling (Postman, Swagger) is easier to use with REST.

## Consequences
- We'll define clear endpoints for each operation.
- Switching to GraphQL in the future will require reworking the API layer.
- We'll use an API abstraction layer to ease this transition if needed.

----- FILE: Abstraction Layer (shared interface) -----

# TC_TYPE: abstraction_layer

class APIInterface:
    def get_data(self):
        pass

----- FILE: Development Version (REST Implementation) -----

import requests
from api_interface import APIInterface

class RestAPI(APIInterface):
    def get_data(self):
        response = requests.get("https://example.com/api/data")
        return response.json()

----- FILE: Placeholder for GraphQL Implementation -----

# Future implementation if we switch protocols

from api_interface import APIInterface

class GraphQLAPI(APIInterface):
    def get_data(self):
        # Placeholder for GraphQL query structure
        query = """
        query {
            allData {
                id
                name
            }
        }
        """
        # Normally you'd use requests.post() with headers, etc.
        return {"data": "stub"}

----- FILE: Main Application Logic -----

from rest_api import RestAPI  # or GraphQLAPI
from api_interface import APIInterface

def run_client(api: APIInterface):
    data = api.get_data()
    print(data)

if __name__ == "__main__":
    api = RestAPI()
    run_client(api)
